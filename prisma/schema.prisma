generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  role        Role         @default(OPERATOR)
  status      UserStatus   @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lastLoginAt DateTime?
  createdBy   String?
  modifiedBy  String?
  profile     UserProfile?
}

model UserProfile {
  id               String            @id @default(cuid())
  userId           String            @unique
  firstName        String
  lastName         String
  phoneNumber      String?
  address          String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
  department       String?
  position         String?
  employeeId       String?
  dateOfBirth      DateTime?
  gender           Gender?
  avatar           String?
  bio              String?           @db.Text
  emergencyContact EmergencyContact?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id             String      @id @default(cuid())
  profileId      String      @unique
  name           String
  relationship   String
  phoneNumber    String
  altPhoneNumber String?
  email          String?
  address        String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userProfile    UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  status      Status    @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?
  modifiedBy  String?
  products    Product[]
}

model MaterialType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?    @db.Text
  status      Status     @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String?
  modifiedBy  String?
  materials   Material[]
}

model UnitOfMeasure {
  id          String     @id @default(cuid())
  name        String     @unique
  symbol      String
  description String?    @db.Text
  status      Status     @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String?
  modifiedBy  String?
  materials   Material[]
}

model Product {
  id                String            @id @default(cuid())
  sku               String            @unique
  name              String
  description       String?           @db.Text
  categoryId        String
  sizeRange         String[]
  colorOptions      String[]
  unitCost          Decimal           @db.Decimal(10, 2)
  sellingPrice      Decimal           @db.Decimal(10, 2)
  minimumStockLevel Int
  currentStock      Int
  leadTime          Int
  status            Status            @default(ACTIVE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String?
  modifiedBy        String?
  category          ProductCategory   @relation(fields: [categoryId], references: [id])
  boms              BOM[]
  productionOrders  ProductionOrder[]
  orderLines        OrderLine[]
}

model Material {
  id                 String              @id @default(cuid())
  name               String
  typeId             String
  unitOfMeasureId    String
  color              String?
  costPerUnit        Decimal             @db.Decimal(10, 2)
  currentStock       Int
  minimumStockLevel  Int
  leadTime           Int
  supplierId         String
  status             Status              @default(ACTIVE)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  createdBy          String?
  modifiedBy         String?
  type               MaterialType        @relation(fields: [typeId], references: [id])
  unitOfMeasure      UnitOfMeasure       @relation(fields: [unitOfMeasureId], references: [id])
  supplier           Supplier            @relation(fields: [supplierId], references: [id])
  boms               BOM[]
  purchaseOrderLines PurchaseOrderLine[]
}

// BILLS OF MATERIAL
model BOM {
  id              String   @id @default(cuid())
  productId       String
  materialId      String
  quantityNeeded  Decimal  @db.Decimal(10, 3)
  wastePercentage Decimal  @db.Decimal(5, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?
  modifiedBy      String?
  product         Product  @relation(fields: [productId], references: [id])
  material        Material @relation(fields: [materialId], references: [id])
}

// Production Management
model ProductionOrder {
  id              String         @id @default(cuid())
  productId       String
  quantity        Int
  startDate       DateTime
  dueDate         DateTime
  status          Status         @default(ACTIVE)
  priority        Priority       @default(MEDIUM)
  customerOrderId String?
  notes           String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       String?
  modifiedBy      String?
  product         Product        @relation(fields: [productId], references: [id])
  customerOrder   CustomerOrder? @relation(fields: [customerOrderId], references: [id])
  operations      Operation[]
  qualityChecks   QualityCheck[]
}

model WorkCenter {
  id              String      @id @default(cuid())
  name            String
  description     String?     @db.Text
  capacityPerHour Int
  operatingHours  Int
  efficiencyRate  Decimal     @db.Decimal(5, 2)
  status          Status      @default(ACTIVE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdBy       String?
  modifiedBy      String?
  operations      Operation[]
}

model Operation {
  id                String          @id @default(cuid())
  workCenterId      String
  productionOrderId String
  startTime         DateTime
  endTime           DateTime
  status            Status          @default(ACTIVE)
  notes             String?         @db.Text
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdBy         String?
  modifiedBy        String?
  workCenter        WorkCenter      @relation(fields: [workCenterId], references: [id])
  productionOrder   ProductionOrder @relation(fields: [productionOrderId], references: [id])
}

model QualityCheck {
  id                String          @id @default(cuid())
  productionOrderId String
  inspectorId       String // References User
  checkDate         DateTime
  status            Status          @default(ACTIVE)
  defectsFound      String?         @db.Text
  actionTaken       String?         @db.Text
  notes             String?         @db.Text
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdBy         String?
  modifiedBy        String?
  productionOrder   ProductionOrder @relation(fields: [productionOrderId], references: [id])
}

model Supplier {
  id             String          @id @default(cuid())
  name           String
  code           String          @unique
  contactPerson  String
  email          String
  phone          String
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?
  paymentTerms   String?
  leadTime       Int // in days
  status         Status          @default(ACTIVE)
  notes          String?         @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      String?
  modifiedBy     String?
  materials      Material[]
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id               String              @id @default(cuid())
  poNumber         String              @unique
  supplierId       String
  orderDate        DateTime
  expectedDelivery DateTime
  status           Status              @default(ACTIVE)
  totalAmount      Decimal             @db.Decimal(10, 2)
  notes            String?             @db.Text
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  createdBy        String?
  modifiedBy       String?
  supplier         Supplier            @relation(fields: [supplierId], references: [id])
  orderLines       PurchaseOrderLine[]
}

model PurchaseOrderLine {
  id            String        @id @default(cuid())
  poId          String
  materialId    String
  quantity      Int
  unitPrice     Decimal       @db.Decimal(10, 2)
  status        Status        @default(ACTIVE)
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String?
  modifiedBy    String?
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id])
  material      Material      @relation(fields: [materialId], references: [id])
}

model CustomerOrder {
  id               String            @id @default(cuid())
  orderNumber      String            @unique
  customerId       String // References User
  orderDate        DateTime
  requiredDate     DateTime
  status           Status            @default(ACTIVE)
  totalAmount      Decimal           @db.Decimal(10, 2)
  shippingAddress  String?
  billingAddress   String?
  notes            String?           @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdBy        String?
  modifiedBy       String?
  orderLines       OrderLine[]
  productionOrders ProductionOrder[]
}

model OrderLine {
  id            String        @id @default(cuid())
  orderId       String
  productId     String
  quantity      Int
  unitPrice     Decimal       @db.Decimal(10, 2)
  status        Status        @default(ACTIVE)
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String?
  modifiedBy    String?
  customerOrder CustomerOrder @relation(fields: [orderId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
}

// ENUMS
enum Role {
  ADMIN
  MANAGER
  OPERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ACTIVE
  INACTIVE
  SUSPENDED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
